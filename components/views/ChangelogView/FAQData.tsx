import { TFunction } from 'i18next'

/**
 * Type for FAQ data
 */
export type FAQDataType = {
  /** Question for the FAQ */
  question: string
  /** Answer for the FAQ */
  answer: string
}

/**
 * FAQ data
 * @param t - translation function
 * @returns Array of FAQ data
 */
export const FAQData = (t: TFunction<'translation', undefined>): FAQDataType[] => [
  {
    question: t('What is a Filecoin address?'),
    answer: t(
      'A Filecoin address is an identifier that represents an actor in the Filecoin network. It encodes information about the network, address type, payload, and includes a checksum.'
    ),
  },
  {
    question: t('How are Filecoin addresses structured?'),
    answer: t(
      'All Filecoin addresses start with an f to indicate the network (Filecoin), followed by a prefix number (0, 1, 2, 3, 4) representing the address type.'
    ),
  },
  {
    question: t('What are the different address types in Filecoin?'),
    answer: t(
      'There are five address types in Filecoin: the ones that start with 0 are ID address, with 1 are SECP256K1 public key address, with 2 are actor address, with 3 are BLS public key address and with 4 are extensible, user-defined actor addresses'
    ),
  },
  {
    question: t('What is an ID address in Filecoin?'),
    answer: t(
      'An ID address in Filecoin is a short integer assigned to an actor by the InitActor. It represents the actors unique identifier and is prefixed with the network identifier and address type.'
    ),
  },
  {
    question: t('Are actor ID addresses robust in Filecoin?'),
    answer: t(
      'Actor ID addresses in Filecoin are not robust as they depend on chain state and can change temporarily after creation in the case of chain reorganizations. However, once the state defining a new ID reaches finality, it becomes bound to that actor permanently.'
    ),
  },
  {
    question: t('What are public key addresses in Filecoin?'),
    answer: t(
      'Public key addresses in Filecoin are derived from a public-private key pair. They provide a way to identify actors and enable signing of messages. Two types of public key addresses are supported: SECP256K1 addresses (starting with f1) and BLS addresses (starting with f3).'
    ),
  },
  {
    question: t('How are actor addresses created in Filecoin?'),
    answer: t(
      'Actor addresses in Filecoin are generated by taking a sha256 hash of the output of the account creation. For example, the ZH storage provider has the actor address f2plku564ddywnmb5b2ky7dhk4mb6uacsxuuev3pi and the ID address f01248.'
    ),
  },
  {
    question: t('What are extensible user-defined actor addresses in Filecoin?'),
    answer: t(
      'Extensible user-defined actor addresses in Filecoin are introduced through the f4 address class, as defined in Filecoin Improvement Proposal (FIP) 0048. They allow for the creation of custom addressing schemes and support interactions with addresses that do not yet exist on-chain.'
    ),
  },
  {
    question: t('How are f4 addresses structured in Filecoin?'),
    answer: t(
      'An f4 address in Filecoin is structured as f4<address-manager-actor-id>f<new-actor-id>. The <address-manager-actor-id> represents the actor ID of the address manager, and the <new-actor-id> is an arbitrary actor ID chosen by that address manager.'
    ),
  },
  {
    question: t('Can anyone assign f4 addresses in Filecoin?'),
    answer: t(
      'Currently, according to FIP 0048, f4 addresses can only be assigned by specific built-in actors known as address managers. However, it is expected that this restriction will be relaxed in the future, allowing users to deploy custom WebAssembly actors and assign f4 addresses.'
    ),
  },
  {
    question: t('What is the Ethereum Address Manager (EAM) in Filecoin?'),
    answer: t(
      "The Ethereum Address Manager (EAM) is a built-in actor in Filecoin that manages the Ethereum address space within the 410 address namespace. It serves as an EVM smart contract factory and provides methods to create and assign the f410/t410 Filecoin addresses to Ethereum addresses. The f410/t410 address is used for compatibility with Ethereum Virtual Machine (EVM) development tools and applications built on FEVM (Filecoin's EVM implementation)."
    ),
  },
  {
    question: t('How does the Ethereum Address Manager assign Filecoin addresses to Ethereum addresses?'),
    answer: t(
      'When you have an Ethereum wallet address starting with 0x, the Ethereum Address Manager (EAM) will assign a corresponding t410 Filecoin address to it. For example, if you send 10 TFIL to the Ethereum wallet address 0xd388ab098ed3e84c0d808776440b48f685198498 using a wallet like MetaMask, you will receive 10 TFIL to your t410f2oekwcmo2pueydmaq53eic2i62crtbeyuzx2gmy address on the Filecoin Calibration testnet. Similarly, if you deploy a solidity smart contract on Filecoin Calibration, the EAM will assign a corresponding 0x Ethereum smart contract address, such as 0x5f6044198a16279f87d2839c998893858bbf8d9c, to it. This enables you to interact with the smart contract using Ethereum tooling by referencing the assigned Ethereum smart contract address.'
    ),
  },
]
